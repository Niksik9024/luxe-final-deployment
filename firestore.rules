rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      // Check if the user is authenticated and if their custom claim 'admin' is true.
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for the 'videos' collection
    match /videos/{videoId} {
      // Admins have full read/write access.
      allow read, write: if isAdmin();
      // Allow anyone to read a single published video, and authenticated users to list published videos.
      allow get: if resource.data.status == 'Published';
      allow list: if request.auth != null && resource.data.status == 'Published';
    }

    // Rules for the 'galleries' collection
    match /galleries/{galleryId} {
       // Admins have full read/write access.
      allow read, write: if isAdmin();
      // Allow anyone to read a single published gallery, and authenticated users to list published galleries.
      allow get: if resource.data.status == 'Published';
      allow list: if request.auth != null && resource.data.status == 'Published';
    }
    
    // Rules for the 'models' collection
    match /models/{modelId} {
      // Admins have full read/write access.
      allow read, write: if isAdmin();
      // Any authenticated user can read model data.
      allow get: if request.auth != null;
      allow list: if request.auth != null;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // A user can read and create their own document.
      allow read, create: if request.auth != null && request.auth.uid == userId;
      // A user can ONLY update the 'favorites', 'watchHistory' and 'image' fields of their own document.
      // They cannot change their own name, email, or role.
      allow update: if request.auth != null && request.auth.uid == userId
                    && request.resource.data.keys().hasOnly(['favorites', 'watchHistory', 'image', 'name', 'email', 'role'])
                    && request.resource.data.role == resource.data.role; // Prevent role change
    }
  }
}